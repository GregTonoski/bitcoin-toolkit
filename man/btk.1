'\" t
.\"     Title: Bitcoin Toolkit
.\"    Author: [see the "Authors" section]
.\"      Date: 01/18/2023
.\"    Manual: Bitcoin Toolkit Manual
.\"    Source: Bitcoin Toolkit 3.0.0
.\"  Language: English
.\"
.TH "BTK" "1" "01/18/2023" "Bitcoin Toolkit 3.0.0" "Bitcoin Toolkit Manual"
.\" -----------------------------------------------------------------
.\" * set default formatting
.\" -----------------------------------------------------------------
.\" disable hyphenation
.nh
.\" disable justification (adjust text to left margin only)
.ad l
.\" -----------------------------------------------------------------
.\" * MAIN CONTENT STARTS HERE *
.\" -----------------------------------------------------------------
.SH "NAME"
btk \- Assortment of bitcoin-related command-line tools.
.SH "SYNOPSIS"
.sp
.nf
\fIbtk\fR <command> [<command_opts>]
.fi

.sp
.SH "DESCRIPTION"

.sp
Bitcoin Toolkit is a collection of command line tools that allow you to perform a variety of useful bitcoin tasks relating to keys, addresses, nodes, and blockchain data.
.sp
Input, when required, can be a single item or a list of items, and is generally expected to conform to one of three formats: 1) a json array, 2) an ascii list delimited by a newline char, or 3) unstructured binary data. Btk will auto-determine the input format without you specifying it with a command option if it can be determined with a reasonable degree of certainty. However, command options to tell btk which input format to use are availavle and sometimes necessary. Some commands, due to their nature, limit the imput format options.
.sp
One or more output items is usually produced for each input item, and like input, it usually confrms to the same three formats. By default, output will be formatted as a json array unless otherwise specified at the command line, or if the nature of the command you use necessitates an overrides this default behavior. Further, some commands have extra output format options, such as representing the output item(s) as a qrcode.
.sp
Example (single input item):
.sp
.RS 4
.nf
$ printf "my secret passphrase" | btk privkey
[
  "L2r6oCckVhNjAH9qqhteY8P4vH9zRDFCWnzqz35gbcSvjmoroFmD"
]
.fi
.RE
.sp
Example (list of input items):
.sp
.RS 4
.nf
$ cat passphrase_list.txt | btk privkey
[
  "L2r6oCckVhNjAH9qqhteY8P4vH9zRDFCWnzqz35gbcSvjmoroFmD",
  "L12xigvnJMRgxNWvJjgGC8ATHh4oEp3waU1c2u8LoZQt7Xnm8Phu",
  "L254oBcMRVFXzBpuNmNQjjyXb1fxXSxkDhbvGYcqYfER4keM3wpF",
  ...
]
.fi
.RE
.sp
Implementing these structured input/output formats enables you to chain (i.e. pipe) together multiple btk commands to perform complex functions and increase the utility of Bitcoin Toolkit.
.RE
.sp
Example:
.sp
.RS 4
.nf
$ cat passphrase_list.txt | btk privkey | btk address | btk balance --trace
{
  "1HCbgzea8BXHAJJuxKe5XnfhxfvGbkuASJ": [
    "0"
  ],
  "1KpCwHYGioA1VLcxsbbQTW2fPhkcPZuU1E": [
    "0"
  ],
  "1HQzYdUaTXbZjaQ2BV4Z6CXy7XCjs8m1un": [
    "0"
  ],
  ...
}
.fi
.RE

.sp
See "COMMANDS" for a list of btk commands you can use. Run \fIbtk help\fR <command> to view the usage information and see what command options are available.

.sp
.SH "COMMANDS"

.PP
\fBprivkey\fR
.RS 4
Create or modify private keys.
.RE

.PP
\fBpubkey\fR
.RS 4
Generate or modify public keys.
.RE

.PP
\fBaddress\fR
.RS 4
Generate addresses from a public keys.
.RE

.PP
\fBbalance\fR
.RS 4
Query an address balance.
.RE

.PP
\fBnode\fR
.RS 4
Query data from a bitcoin node.
.RE

.PP
\fBconfig\fR
.RS 4
Configure command option default values.
.RE

.PP
\fBhelp\fR
.RS 4
Display usage info for a command.
.RE

.PP
\fBversion\fR
.RS 4
Display btk version info.
.RE

.sp
.SH "COMMAND OPTIONS"

.sp
Command options and their arguments vary based on the command being used. See \fIbtk help\fR <command> for more info.

.SH "AUTHORS"
.sp
Bitcoin toolkit was created, and is maintained, by Brian Barto. Brian can be contacted at \fBbartobrian@gmail.com\fR.
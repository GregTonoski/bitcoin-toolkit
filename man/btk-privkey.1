'\" t
.\"     Title: Bitcoin Toolkit
.\"    Author: [see the "Authors" section]
.\"      Date: 01/18/2023
.\"    Manual: Bitcoin Toolkit Manual
.\"    Source: Bitcoin Toolkit 3.0.0
.\"  Language: English
.\"
.TH "BTK" "1" "01/18/2023" "Bitcoin Toolkit 3.0.0" "Bitcoin Toolkit Manual"
.\" -----------------------------------------------------------------
.\" * set default formatting
.\" -----------------------------------------------------------------
.\" disable hyphenation
.nh
.\" disable justification (adjust text to left margin only)
.ad l
.\" -----------------------------------------------------------------
.\" * MAIN CONTENT STARTS HERE *
.\" -----------------------------------------------------------------
.SH "NAME"
btk-privkey \- Create, modify, and format private keys.
.SH "SYNOPSIS"
.sp
.nf
\fIbtk\fR \fIprivkey\fR [<options>]
.fi
.sp
.SH "DESCRIPTION"
.sp
Create new cryptographically secure bitcoin private keys, transform existing bitcoin private keys, and generate bitcoin private keys from various types of input.
.sp
Input can be a bitcoin private key or other data types such as strings, hexideciaml data, decimal values, and even binary data. All of these data types can be transformed into a bitcoin private key, and visa-versa.
.sp
Change the compression flag of a bitcoin private key, tranforming it from compressed to uncompressed, and visa-versa.
.sp
Process single inputs as well as very large lists. In either case, in order to make sure the input is properly understood and processed, all input must adhere to one of the input formats described in the options section below.
.sp
Similarly, output also must adhere to one of multiple formats. See the input formats described in the options section below.

.sp
.SH "OPTIONS"

.sp
Note that the input/output format options govern how the input/output data is structured. This structure applies to the encapsulation of the data that is to be processed as input or produced as output. It does not apply to the data itself. The input/output type options apply to the encapsulated data to be processed as input and/or produced as output.

.SS "Create"

.PP
--create
.RS 4
Create a random cryptographically secure private key from your local CSPRNG.
.RE

.SS "Input Format"

.PP
\-j, --in-format=json
.RS 4
Input is formatted as a list of values contained within a json array. If a valid json object (name/value pairs) is provided as input, the object will be traversed until the first array value is discovered. The values in this array will be processed as input.
.RE

.PP
\-l, --in-format=list
.RS 4
Input is formatted as a list of ascii strings delimited by a newline character.
.RE

.PP
\-b, --in-format=binary
.RS 4
Input is a single unstructured blob of binary data.
.sp
.RS 4
cat my-image.jpg | btk privkey -b
.RE

.SS "Input Type"

.PP
\-w, --in-type=wif
.RS 4
Input type is a private key in "Wallet Import Format" (wif).
.RE

.PP
\-x, --in-type=hex
.RS 4
Input type is a private key represented as a 32 byte hexadecimal string. The string must be at least 64 characters long (two chars for each byte). If a 65th and 66th character exist, they are interpreted as a compression flag. Any extra characters beyond that point are ignored.
.RE

.PP
\-r, --in-type=raw
.RS 4
Input type is a private key represented as 32 bytes of raw binary data. Input must be at least 32 bytes long. If a 33rd byte exists, it is interpreted as a compression flag. Any extra data beyond that point is ignored.
.RE

.PP
\-s, --in-type=string
.RS 4
Input type is an arbitrary ASCII string. Strings are processed through a SHA256 hash algorithm to generate a 32 byte private key.
.RE

.PP
\-d, --in-type=decimal
.RS 4
Input is an private key represented as a decminal value. The decimal value is converted to a 32-byte binary equivalent to generate a private key.
.RE

.SS "Output Format"

.PP
\-J, --out-format=json
.RS 4
Default. Format output as a json data structure. This is usually a json array, but it can sometimes be a key/value object when other options are applied.
.RE

.PP
\-L, --out-format=list
.RS 4
Format output as an ascii string list delimited by a newline character.
.RE

.PP
\-B, --out-format=binary
.RS 4
Format output as raw unstructured binary. This is equivelent to applying no format.
.RE

.PP
\-Q, --out-format=qrcode
.RS 4
Format each element in the output list as a qrcode.
.RE

.SS "Output Type"

.PP
\-W, --out-type=wif
.RS 4
Default. Transform the private key to a "Wallet Import Format" (wif) string.
.RE

.PP
\-X, --out-type=hex
.RS 4
Transform the private key to a hexadecimal string. The string will be 64 characters in length. If a compression option is used, an extra pair of hex chars will be added to represent the compression flag, making the length 66 characters.
.RE

.PP
\-D, --out-type=decimal
.RS 4
Transform the 32 byte private key to its decimal equivalent, which will be a very large number.
.RE

.PP
\-R, --out-type=raw
.RS 4
Transform the private key to 32 bytes of raw binary data. This is only useful when redirecting the output to a file or another program.
.RE

.SS "Compression"

.PP
\-C, --compressed=true
.RS 4
Default. Compress the private key. 
.RE

.PP
\-U, --compressed=false
.RS 4
Uncompress the private key.
.RE

.SS "Other Options"

.PP
\--testnet
.RS 4
Convert the private key for use on the testnet network. This option is only useful when used with the output type option set to "wif". Otherwise, it is ignored.
.RE

.PP
\--rehash=<count>
.RS 4
Rehash the private key count times. Each rehash processes the raw private key data through a SHA256 hashing algorithm, deriving a new private key.
.RE

.PP
\-G, --grep=<regex>
.RS 4
Only include output list items that match the regex string.
.RE

.PP
\-S, --stream
.RS 4
Stream the output. This prints the output as soon as each input item is processed. Useful for large list processing. When this option is not used (default), all output is printed to stdout when the last input item in a list is processed.
.RE

.PP
\--trace
.RS 4
Set the input as the json key and the output as the array value. This cna only be used when the output format is set to "json". This is useful when you want to preserve all the inputs used in a string of commands so that they are all represented in the final outout.
.RE

.sp
.SH "SEE ALSO"

.sp
\fBbtk\fR(1), \fBbtk-pubkey\fR(1), \fBbtk-address\fR(1)
'\" t
.\"     Title: Bitcoin Toolkit
.\"    Author: [see the "Authors" section]
.\"      Date: 01/18/2023
.\"    Manual: Bitcoin Toolkit Manual
.\"    Source: Bitcoin Toolkit 3.0.0
.\"  Language: English
.\"
.TH "BTK" "1" "01/18/2023" "Bitcoin Toolkit 3.0.0" "Bitcoin Toolkit Manual"
.\" -----------------------------------------------------------------
.\" * set default formatting
.\" -----------------------------------------------------------------
.\" disable hyphenation
.nh
.\" disable justification (adjust text to left margin only)
.ad l
.\" -----------------------------------------------------------------
.\" * MAIN CONTENT STARTS HERE *
.\" -----------------------------------------------------------------
.SH "NAME"
btk-address \- Generate and format an address.
.SH "SYNOPSIS"
.sp
.nf
\fIbtk\fR \fIaddress\fR [<options>]
.fi
.sp
.SH "DESCRIPTION"
.sp
Generate an address from a public key, or directly from a private key. An address can be encoded as a legacy P2PKH address, or a newer P2WPKH bech32 address.

.sp
.SH "OPTIONS"

.sp
Note that the input/output format options govern how the input/output data is structured. This structure applies to the encapsulation of the data that is to be processed as input or produced as output. It does not apply to the data itself. The input/output type options apply to the encapsulated data to be processed as input and/or produced as output.

.SS "Input Format"

.PP
\-j, --in-format=json
.RS 4
Input is formatted as a list of values contained within a json array. If a valid json object (name/value pairs) is provided as input, the object will be traversed until the first array value is discovered. The values in this array will be processed as input.
.RE

.PP
\-l, --in-format=list
.RS 4
Input is formatted as a list of ascii strings delimited by a newline character.
.RE

.SS "Input Type"

.PP
\-w, --in-type=wif
.RS 4
Input type is a private key in "Wallet Import Format" (wif).
.RE

.PP
\-x, --in-type=hex
.RS 4
Input type is a public key represented as a 33 (copressed) or 65 (uncompressed) byte byte hexadecimal string.
.RE

.SS "Output Format"

.PP
\-J, --out-format=json
.RS 4
Default. Format output as a json data structure. This is usually a json array, but it can sometimes be a key/value object when other options are applied.
.RE

.PP
\-L, --out-format=list
.RS 4
Format output as an ascii string list delimited by a newline character.
.RE

.SS "Address Encoding"

.PP
\--p2pkh
.RS 4
Default. Encode the address using legacy Pay-to-PubKey-Hash encoding.
.RE

.PP
\--bech32
.RS 4
Encode the address using newer Pay-to-Witness-PubKey-Hash bech32 encoding.
.RE

.SS "Other Options"

.PP
\-G, --grep=<regex>
.RS 4
Only include output list items that match the regex string.
.RE

.PP
\-S, --stream
.RS 4
Stream the output. This prints the output as soon as each input item is processed. Useful for large list processing. When this option is not used (default), all output is printed to stdout when the last input item in a list is processed.
.RE

.PP
\--trace
.RS 4
Set the input as the json key and the output as the array value. This cna only be used when the output format is set to "json". This is useful when you want to preserve all the inputs used in a string of commands so that they are all represented in the final outout.
.RE

.sp
.SH "SEE ALSO"

.sp
\fBbtk\fR(1), \fBbtk-pubkey\fR(1), \fBbtk-address\fR(1)